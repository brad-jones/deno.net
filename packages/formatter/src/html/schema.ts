/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Configuration for dprint-plugin-markup.
 */
export interface Schema {
  /**
   * The line width limitation that markup_fmt should *(but not must)* avoid exceeding. markup_fmt will try its best to keep line width less than this value, but it may exceed for some cases, for example, a very very long single word.
   */
  printWidth?: number;
  /**
   * Specify use space or tab for indentation.
   */
  useTabs?: boolean;
  /**
   * Size of indentation. When enabled `useTabs`, this option may be disregarded, since only one tab will be inserted when indented once.
   */
  indentWidth?: number;
  /**
   * Specify whether use `\n` (LF) or `\r\n` (CRLF) for line break.
   */
  lineBreak?: "lf" | "crlf";
  /**
   * Control the quotes of attribute value.
   */
  quotes?: ("double" | "single") & string;
  /**
   * Control whether whitespace should be inserted at the beginning and end of comments and comments should be indented properly or not.
   */
  formatComments?: boolean;
  /**
   * Control whether the code block in the `<script>` tag should be indented or not.
   */
  scriptIndent?: boolean;
  /**
   * Control whether the code block in the `<script>` tag should be indented or not for HTML.
   */
  "html.scriptIndent"?: boolean | null;
  /**
   * Control whether the code block in the `<script>` tag should be indented or not for Vue.
   */
  "vue.scriptIndent"?: boolean | null;
  /**
   * Control whether the code block in the `<script>` tag should be indented or not for Svelte.
   */
  "svelte.scriptIndent"?: boolean | null;
  /**
   * Control whether the code block in the `<script>` tag should be indented or not for Astro.
   */
  "astro.scriptIndent"?: boolean | null;
  /**
   * Control whether the code block in the `<style>` tag should be indented or not.
   */
  styleIndent?: boolean;
  /**
   * Control whether the code block in the `<style>` tag should be indented or not for HTML.
   */
  "html.styleIndent"?: boolean | null;
  /**
   * Control whether the code block in the `<style>` tag should be indented or not for Vue.
   */
  "vue.styleIndent"?: boolean | null;
  /**
   * Control whether the code block in the `<style>` tag should be indented or not for Svelte.
   */
  "svelte.styleIndent"?: boolean | null;
  /**
   * Control whether the code block in the `<style>` tag should be indented or not for Astro.
   */
  "astro.styleIndent"?: boolean | null;
  /**
   * Control the closing bracket (`>`) of a multi-line element should come at the end of the last line or on the next line (with a line break).
   */
  closingBracketSameLine?: boolean;
  /**
   * When there're no children in an element, this option controls whether to insert a line break before the closing tag or not.
   */
  closingTagLineBreakForEmpty?: ("always" | "fit" | "never") & string;
  /**
   * Control the maximum number of attributes in one line. If this option is unset, there won't be any limitations. This option conflicts with `preferAttrsSingleLine` option.
   */
  maxAttrsPerLine?: number | null;
  /**
   * Control whether attributes should be put on single line when possible. This option conflicts with `maxAttrsPerLine` option.
   */
  preferAttrsSingleLine?: boolean;
  /**
   * Control whether single attribute should be put on the same line with tag name.
   */
  singleAttrSameLine?: boolean;
  /**
   * Control whether HTML normal element should be self-closed or not if it doesn't have children.
   */
  "html.normal.selfClosing"?: boolean | null;
  /**
   * Control whether HTML void element should be self-closed or not if it doesn't have children.
   */
  "html.void.selfClosing"?: boolean | null;
  /**
   * Control whether Vue/Svelte/Astro/Angular component should be self-closed or not if it doesn't have children.
   */
  "component.selfClosing"?: boolean | null;
  /**
   * Control whether SVG element should be self-closed or not if it doesn't have children.
   */
  "svg.selfClosing"?: boolean | null;
  /**
   * Control whether MathML element should be self-closed or not if it doesn't have children.
   */
  "mathml.selfClosing"?: boolean | null;
  /**
   * Control the whitespace sensitivity before and after the children of an element.
   */
  whitespaceSensitivity?: ("css" | "strict" | "ignore") & string;
  /**
   * Control the whitespace sensitivity before and after the children of an element for components.
   */
  "component.whitespaceSensitivity"?:
    & ("css" | "strict" | "ignore" | null)
    & ((("css" | "strict" | "ignore" | null) & string) | (null & ("css" | "strict" | "ignore" | null)));
  /**
   * Control the case of "doctype" keyword in `<!DOCTYPE>`.
   */
  doctypeKeywordCase?: ("ignore" | "upper" | "lower") & string;
  /**
   * Control Vue `v-bind` directive style.
   */
  vBindStyle?: ("short" | "long" | null) & ((("short" | "long" | null) & string) | (null & ("short" | "long" | null)));
  /**
   * Control Vue `v-on` directive style.
   */
  vOnStyle?: ("short" | "long" | null) & ((("short" | "long" | null) & string) | (null & ("short" | "long" | null)));
  /**
   * Control Vue `v-for` directive delimiter style.
   */
  vForDelimiterStyle?: ("in" | "of" | null) & ((("in" | "of" | null) & string) | (null & ("in" | "of" | null)));
  /**
   * Control Vue `v-slot` directive style.
   */
  vSlotStyle?:
    & ("short" | "long" | "vSlot" | null)
    & ((("short" | "long" | "vSlot" | null) & string) | (null & ("short" | "long" | "vSlot" | null)));
  /**
   * Control Vue `v-slot` directive style for Vue components.
   */
  "component.vSlotStyle"?: "short" | "long" | "vSlot" | null;
  /**
   * Control Vue `v-slot` directive style for default slot.
   */
  "default.vSlotStyle"?: "short" | "long" | "vSlot" | null;
  /**
   * Control Vue `v-slot` directive style for named slot.
   */
  "named.vSlotStyle"?: "short" | "long" | "vSlot" | null;
  /**
   * Control whether Vue attribute should be written in short-hand form or not if attribute name and value are same.
   */
  vBindSameNameShortHand?: boolean | null;
  /**
   * Control the component naming style in template.
   */
  vueComponentCase?: ("ignore" | "pascalCase" | "kebabCase") & string;
  /**
   * Control whether Svelte attribute value should be in strict mode or not.
   */
  strictSvelteAttr?: boolean;
  /**
   * Control whether Svelte attribute should be written in short-hand form or not when possible.
   */
  svelteAttrShorthand?: boolean | null;
  /**
   * Control whether Svelte directive should be written in short-hand form or not when possible.
   */
  svelteDirectiveShorthand?: boolean | null;
  /**
   * Control whether Astro attribute should be written in short-hand form or not when possible.
   */
  astroAttrShorthand?: boolean | null;
  /**
   * Control whether the next Angular control flow code should be on the same line with previous `}` or not.
   */
  angularNextControlFlowSameLine?: boolean;
  /**
   * Tell markup_fmt what script formatter you are using.
   */
  scriptFormatter?: string | null;
  /**
   * Text directive for ignoring formatting specific element or node.
   */
  ignoreCommentDirective?: string;
  /**
   * Text directive for ignoring formatting a whole file.
   */
  ignoreFileCommentDirective?: string;
}
